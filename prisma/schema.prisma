generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model logs {
  log_id       Int        @id(map: "log_pk") @default(autoincrement())
  user_id      Int
  group_id     Int
  org_id       Int?
  date         DateTime   @db.Timestamp(6)
  start_time   DateTime   @db.Timestamp(6)
  end_time     DateTime?  @db.Timestamp(6)
  duration     DateTime?  @db.Time(6)
  client_id    Int?
  project_id   Int
  task_id      Int
  timesheet_id Int?
  invoice_id   Int?
  notes        String?
  billable     Boolean?   @default(false)
  status       status_log @default(running)
  tasks        tasks      @relation(fields: [task_id], references: [task_id], onDelete: NoAction, onUpdate: NoAction, map: "logs_tasks_null_fk")
}

model projects {
  id          Int    @id(map: "projects_pkey1") @unique @default(autoincrement())
  group_id    Int
  org_id      Int?
  name        String @db.VarChar(80)
  description Int?
  status      Int    @default(1) @db.SmallInt
}

model tasks {
  task_id          Int       @id(map: "projects_pkey") @unique(map: "tasks_id_key") @default(autoincrement())
  group_id         Int
  org_id           Int?
  task_name        String    @db.VarChar(80)
  task_description String?   @db.VarChar(255)
  project_id       Int?
  priority         priority  @default(medium)
  estimated_time   Int?
  assignee         Int?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  due_date         DateTime? @db.Timestamp(6)
  task_status      status    @default(pending)
  logs             logs[]
}

model users {
  id            Int     @id @default(autoincrement())
  email         String  @unique @db.VarChar(120)
  username      String  @unique @db.VarChar(120)
  password      String? @db.VarChar(120)
  status        Int     @default(1) @db.SmallInt
  group_id      Int
  org_id        Int?
  role_id       Int?
  client_id     Int?
  rate          Int     @default(0)
  quota_percent BigInt? @default(100000000)
}

enum priority {
  high
  medium
  low
}

enum status {
  pending
  approved
  rejected
}

enum status_log {
  running
  ended
}
